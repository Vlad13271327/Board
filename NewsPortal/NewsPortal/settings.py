"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
import logging
logger = logging.getLogger('django')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-oxa+l)fnrp$8yq*ms%%q3raazox6)1$txbl*lp56xe%)i4s2kk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news.apps.NewsConfig',
    'accounts',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'django_apscheduler',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'


WSGI_APPLICATION = 'NewsPortal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / "static"]


# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' для тестов
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'lvp.2204'
EMAIL_HOST_PASSWORD = 'dhtddqnudemvxnbw'
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = 'lvp.2204@yandex.ru'

SITE_URL = 'http://127.0.0.1:8000'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_FORMS = {'signup': 'sign.forms.BasicSignupForm'}


APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25


CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style' : '{',
    'formatters': {
        'DEBUG_log': {
            'format': '%(asctime)s %(levelname)s  %(message)s',
            'datefmt': '%d.%m.%Y  %H-%M-%S'
         },
        'INFO_log':{
            'format': '%(asctime)s %(levelname)s  %(message)s'
        },
        'WARNING_log':{
            'format': '%(asctime)s %(levelname)s  %(message)s %(pathname)s'
        },
        'ERROR_log':{
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s %(exc_info)s',
            'datefmt': '%d.%m.%Y  %H-%M-%S'
        },
        'CRITICAL_log':{
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s %(exc_info)s'
        },
        'email':{
            'format':'%(asctime)s %(levelname)s %(pathname)s %(message)s',
            'datefmt': '%d.%m.%Y  %H-%M-%S'
        },
        'file_general':{
           'format':'%(asctime)s %(levelname)s %(message)s %(module)s',
        'datefmt': '%d.%m.%Y  %H-%M-%S'
        },
        'file_error':{
           'format':'%(asctime)s %(levelname)s %(pathname)s %(message)s %(exc_info)s',
        'datefmt': '%d.%m.%Y  %H-%M-%S'
        },
        'file_security':{
           'format':'%(asctime)s %(levelname)s %(message)s %(module)s',
        'datefmt': '%d.%m.%Y  %H-%M-%S'
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'handlers':{
        'console_DEBUG':{
            'level': 'DEBUG',
            'filters':['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'DEBUG_log'
        },
        'console_INFO':{
            'level': 'DEBUG',
            'filters':['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'INFO_log'
        },
        'console_WARNING':{
            'level': 'WARNING',
            'filters':['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'WARNING_log'
        },
         'console_ERROR':{
            'level': 'ERROR',
            'filters':['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'ERROR_log'
        },
         'console_CRITICAL':{
            'level': 'CRITICAL',
            'filters':['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'CRITICAL_log'
        },
        'file_GENERAL':{
            'level': 'INFO',
            'filters':['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename':'Logging/general.log',
            'formatter': 'file_general'
        },
        'file_ERROR':{
            'level': 'ERROR',
            'filters':['require_debug_false'],
            'class':'logging.FileHandler',
            'filename':'Logging/errors.log',
            'formatter': 'file_error'
        },
        'file_ERROR_CRITICAL':{
            'level': 'CRITICAL',
            'class': 'logging.FileHandler',
            'filename':'Logging/errors.log',
            'formatter': 'file_error'
        },
        'file_SECURITY':{
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename':'Logging/security.log',
            'formatter': 'file_security'
        },
        'email_ADMINS':{
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'email'
        }
    },
    'loggers':{
        'django':{
            'level': 'DEBUG',
            'handlers':['console_DEBUG', 'console_INFO', 'console_WARNING', 'console_ERROR', 'console_CRITICAL', 'file_GENERAL',],
            'propagate': True,
        },
        'django.request':{
            'level': 'ERROR',
            'handlers':['file_ERROR', 'file_ERROR_CRITICAL', 'email_ADMINS'],
            'propagate': False,
        },
        'django.server':{
            'level': 'ERROR',
            'handlers':['file_ERROR', 'file_ERROR_CRITICAL', 'email_ADMINS'],
            'propagate': False,
        },
        'django.template':{
            'level': 'ERROR',
            'handlers':['file_ERROR', 'file_ERROR_CRITICAL'],
            'propagate': False,
        },
        'django.db.backends':{
            'level': 'ERROR',
            'handlers':['file_ERROR', 'file_ERROR_CRITICAL'],
            'propagate': False,
        },
        'django.security':{
            'level': 'DEBUG',
            'handlers':['file_SECURITY'],
            'propagate': False,
        },
    }
}
